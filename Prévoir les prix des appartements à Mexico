
OBJECTIFS : Pr√©voir les prix des appartements √† Mexico a partir d'un model de marchine learning 
## üß† Donn√©es et Mod√®le
- Donn√©es issues d‚Äôune base immobili√®re de Mexico City.
- Mod√®le utilis√© : **r√©gression lin√©aire**.
- Objectif : pr√©dire le prix des appartements en fonction du quartier.

# Import libraries here
import pandas as pd 
from glob import glob
import matplotlib.pyplot as plt
import plotly.express as px
from sklearn.metrics import mean_absolute_error
from sklearn.linear_model import LinearRegression,Ridge
from sklearn.pipeline import make_pipeline
from sklearn.utils.validation import check_is_fitted
from category_encoders import OneHotEncoder
from sklearn.impute import SimpleImputer

# Pr√©parer les donn√©es 
Importer 
T√¢che 2.5.1 : √âcrire une wranglefonction qui prend le nom d'un fichier CSV en entr√©e et renvoie un DataFrame. La fonction doit effectuer les √©tapes suivantes :

1- Sous-ensemble des donn√©es dans le fichier CSV et renvoie uniquement les appartements √† Mexico ( "Distrito Federal") qui co√ªtent moins de 100 000 $.
2- Supprimez les valeurs aberrantes en supprimant les 10 % inf√©rieurs et sup√©rieurs des propri√©t√©s en termes de "surface_covered_in_m2".
3- Cr√©ez "lat"des "lon"colonnes s√©par√©es.
4- Mexico est divis√©e en 15 arrondissements . Cr√©ez une "borough"entit√© √† partir de la "place_with_parent_names"colonne.
5- Supprimez les colonnes qui contiennent plus de 50 % de valeurs nulles.
6- Supprimez les colonnes contenant des valeurs cat√©gorielles √† cardinalit√© faible ou √©lev√©e.
7- Supprimez toutes les colonnes qui constitueraient une fuite pour la cible "price_aprox_usd".
8- Supprimez toutes les colonnes qui pourraient cr√©er des probl√®mes de multicolin√©arit√©.

# construction d'une fonction 
# Build your `wrangle` function
def wrangle(filepath):
    df=pd.read_csv(filepath)
    mask_apt=df["property_type"]=="apartment"
    mask_ba=df["place_with_parent_names"].str.contains("Distrito Federal")
    mask_prix=df["price_aprox_usd"]<100_000
    df=df[mask_apt & mask_ba & mask_prix]
    #suprimons les valeurs aberantes en r√©duisant de 10
    low,high=df["surface_covered_in_m2"].quantile([0.1,0.9])
    mask_area=df["surface_covered_in_m2"].between(low,high)
    df=df[mask_area]
    # split lat-lon columns 
    df[["lat","lon"]]=df["lat-lon"].str.split(",",expand=True).astype(float)
    df.drop(columns=["lat-lon"],inplace=True)
    # borough of mexico
    df["borough"]=df["place_with_parent_names"].str.split("|",expand=True)[1]
    #drop columns above 50 NaN
    df.drop(columns=["surface_total_in_m2","price_usd_per_m2","price","price_per_m2","operation"],inplace=True)
    df.drop(columns=["floor","rooms","expenses","properati_url","currency","price_aprox_local_currency","property_type","place_with_parent_names"],inplace=True)
    
    return df 
# Use this cell to test your wrangle function and explore the data
df=wrangle("data/mexico-city-real-estate-1.csv")
df.head()
df.info()
#resultats 
<class 'pandas.core.frame.DataFrame'> 
Int64Index : 1 101 entr√©es, 11 √† 4 605 
Colonnes de donn√©es (13 colonnes au total) : 
 # Colonne Nombre non nul Type de donn√©es   
--- ------ -------------- -----   
 0 op√©ration 1 101 objet non nul 
 1 type_de_propri√©t√© 1 101 objet non nul 
 2 nom_de_l'emplacement_avec_les_parents 1 101 objet non nul 
 3 prix 1 101 float64 non nul 
 4 devise 1 101 objet non nul 
 5 prix_environ_devise_locale 1 101 float64 non nul 
 6 prix_environ_usd 1 101 float64 non nul 
 7 surface_couverte_en_m2 1 101 float64 non nul 
 8 prix_au_m2 1 101 float64 non nul 
 9 url_propri√©t√© 1101 objet non nul 
 10 lat 1041 float64 non nul 
 11 ‚Äã‚Äãlon 1041 float64 non nul 
 12 borough 1101 objet non nul 
dtypes : float64(7), object(6) 
utilisation de la m√©moire : 120,4 Ko ou plus

# T√¢che 2.5.2 : Utiliser glob pour cr√©er la liste files. Elle doit contenir les noms de tous les fichiers CSV immobiliers de Mexico du ./datar√©pertoire, √† l'exception de mexico-city-test-features.csv.
files=glob("./data/mexico-city-real-estate-*.csv")
files
# T√¢che 2.5.3 : Combinez votre wranglefonction, une liste de compr√©hension et pd.concatun DataFrame df. Ce dernier doit contenir toutes les propri√©t√©s des cinq fichiers CSV files.
frames =[wrangle(file) for file in files]
df=pd.concat(frames,ignore_index=True)

print(df.info())
df.head()

# Explorer ¬∂
T√¢che 2.5.4 : Cr√©ez un histogramme montrant la distribution des prix des appartements ( "price_aprox_usd") dans df. Assurez-vous d'√©tiqueter l'axe des x "Price [$]", l'axe des y "Count"et de lui donner le titre "Distribution of Apartment Prices". Utilisez Matplotlib ( plt).
# Build histogram
plt.hist(df["price_aprox_usd"])


# Label axes
plt.xlabel("Price [$]")
plt.ylabel("Count")

# Add title
plt.title("Distribution of Apartment Prices")

# Don't delete the code below üëá
plt.savefig("images/2-5-4.png", dpi=150)

T√¢che 2.5.5 : Cr√©ez un nuage de points qui montre le prix de l'appartement ( "price_aprox_usd") en fonction de la taille de l'appartement ( "surface_covered_in_m2"). Assurez-vous d'√©tiqueter vos axes x "Area [sq meters]"et y "Price [USD]". Votre graphique doit avoir le titre "Mexico City: Price vs. Area". Utilisez Matplotlib ( plt).
# Build scatter plot
plt.scatter(df["surface_covered_in_m2"],df["price_aprox_usd"])


# Label axes
plt.xlabel("Area [sq meters]")
plt.ylabel("Price [USD]")

# Add title
plt.title("Mexico City: Price vs. Area")

# Don't delete the code below üëá
plt.savefig("images/2-5-5.png", dpi=150)

# T√¢che 2.5.6 : (NON NOT√â) Cr√©ez un nuage de points Mapbox qui montre l‚Äôemplacement des appartements dans votre ensemble de donn√©es et repr√©sentez leur prix √† l‚Äôaide de couleurs.

Quels quartiers de la ville semblent avoir des prix immobiliers plus √©lev√©s ?

# Plot Mapbox location and price
fig = px.scatter_mapbox(
    df,
    lat="lat",
    lon="lon",
    center={"lat": 19.43, "lon": -99.13},
    width=600,  # Width of map
    height=600,  # Height of map
    hover_data=["price_aprox_usd"],
    
)
fig.update_layout(mapbox_style="open-street-map")

fig.show()

# Diviser 
T√¢che 2.5.7 : Cr√©ez votre matrice de caract√©ristiques X_trainet votre vecteur cible y_train. Votre cible est "price_aprox_usd". Vos caract√©ristiques doivent correspondre √† toutes les colonnes restantes du DataFrame nettoy√© ci-dessus.
# Split data into feature matrix `X_train` and target vector `y_train`.
target="price_aprox_usd"
features=["borough","surface_covered_in_m2","lat","lon"]
X_train = df[features]
y_train = df[target]

# Mod√®le de construction 
Ligne de base 
T√¢che 2.5.8 : Calculez l‚Äôerreur absolue moyenne de base pour votre mod√®le.
y_mean = y_train.mean()
y_pred_baseline =[y_mean]*len(y_train)
baseline_mae =mean_absolute_error(y_train , y_pred_baseline)
print("Mean apt price:", y_mean)
print("Baseline MAE:", baseline_mae)
# Resultats 
Prix ‚Äã‚Äãmoyen d'un appartement : 54246,5314982642 
MAE de base : 17239,939475888295
Cela signifie que :
Si tu pr√©dis toujours le prix moyen (54 246 USD) pour tous les appartements,
Tu feras en moyenne une erreur de ¬±17 239 USD.

# T√¢che 2.5.9 : Cr√©ez un pipeline nomm√© modelcontenant tous les transformateurs n√©cessaires √† cet ensemble de donn√©es et l'un des pr√©dicteurs utilis√©s au cours de ce projet. Adaptez ensuite votre mod√®le aux donn√©es d'apprentissage.
ohe =OneHotEncoder(use_cat_names=True)
ohe.fit(X_train)
XT_train =ohe.transform(X_train)
print(XT_train.shape)
XT_train.head()

# # Build Model
model = make_pipeline(
    OneHotEncoder(use_cat_names=True),
    SimpleImputer(),
    Ridge(),
    
)
# Fit model
model.fit(X_train,y_train)
# resultats 
Pipeline(√©tapes=[('onehotencoder', 
                 OneHotEncoder(cols=['borough'], use_cat_names=True)), 
                ('simpleimputer', SimpleImputer()), ('ridge', Ridge())])

# √âvaluer 
T√¢che 2.5.10 : Lire le fichier CSV mexico-city-test-features.csvdans le DataFrame X_test.
X_test = pd.read_csv("data/mexico-city-test-features.csv")[features]
print(X_test.info())
X_test.head()
<class 'pandas.core.frame.DataFrame'> 
RangeIndex : 1 041 entr√©es, de 0 √† 1 040 
Colonnes de donn√©es (4 colonnes au total) : 
 # Colonne Nombre non nul Type de donn√©es   
--- ------ -------------- -----   
 0 borough 1 041 objet non nul 
 1 surface_covered_in_m2 1 041 float64 non nul 
 2 lat 986 float64 non nul 
 3 lon 986 float64 non nul 
Types de donn√©es : float64(3), object(1) 
Utilisation de la m√©moire : 32,7 Ko et 
plus Aucun

# T√¢che 2.5.11 : Utilisez votre mod√®le pour g√©n√©rer une s√©rie de pr√©dictions pour X_test. 
Lorsque vous soumettez vos pr√©dictions √† l'√©valuateur, celui-ci calcule l'erreur absolue moyenne de votre mod√®le.
y_test_pred = pd.Series(model.predict(X_test))
y_test_pred.head()
y_test_pred = pd.Series(model.predict(X_test))
y_test_pred.head()
0 53538.366480 
1 53171.988369 
2 34263.884179 
3 53488.425607 
4 68738.924884 
type de donn√©es : float64

# Communiquer les r√©sultats 
T√¢che 2.5.12 : Cr√©er une s√©rie nomm√©e feat_imp. L'index doit contenir les noms de toutes les entit√©s prises en compte par votre mod√®le pour ses pr√©dictions ; 
les valeurs doivent correspondre aux coefficients associ√©s √† chaque entit√©. La s√©rie doit √™tre tri√©e par ordre croissant de valeur absolue.
arrondissement_Benito Ju√°rez 13778.188880 
arrondissement_Tlalpan 10319.429804 
arrondissement_Iztapalapa -13349.017448 
arrondissement_Gustavo A. Madero -6637.429757 
arrondissement_Venustiano Carranza -5609.918629 
arrondissement_Iztacalco 405.403127 
arrondissement_Coyoac√°n 3737.561001 
arrondissement_Cuauht√©moc -350.531990 
arrondissement_Miguel Hidalgo 1977.314718 
arrondissement_Azcapotzalco 2459.288646 
arrondissement_Tl√°huac -14166.869486 
arrondissement_√Ålvaro Obreg√≥n 3275.121061 
borough_La Magdalena Contreras -5925.666450 
borough_Xochimilco 929.857400 
borough_Cuajimalpa de Morelos 9157.269123 
surface_couverte_en_m2 291.654156 
lat 478.901375 
lon -2492.221814 
dtype: float64

# T√¢che 2.5.13 : Cr√©ez un graphique √† barres horizontales pr√©sentant les 10 coefficients les plus influents de votre mod√®le.
N'oubliez pas d'√©tiqueter vos axes x "Importance [USD]"et y "Feature"respectivement et de donner √† votre graphique le titre "Feature Importances for Apartment Price".
Utilisez pandas.
# Build bar chart
feat_imp.sort_values(key=abs).tail(10).plot(kind="barh")


# Label axes
plt.xlabel("Impotance [USD]")
plt.ylabel("Feature")

# Add title
plt.title("Feature Importance for Apartment Price");

# Don't delete the code below üëá
plt.savefig("images/2-5-13.png", dpi=150)


üîç Analyse de l'importance des variables
‚úÖ Lecture g√©n√©rale :
- Chaque barre repr√©sente l‚Äôeffet moyen (positif ou n√©gatif) qu‚Äôun quartier a sur le prix d‚Äôun appartement par rapport √† une base de r√©f√©rence.

- Plus la valeur est grande (positivement ou n√©gativement), plus le quartier influence le prix.

üìà Quartiers avec effet POSITIF sur le prix

Quartier	Impact estim√©
Benito Ju√°rez	+13 000 USD
Tlalpan	+10 000 USD
Cuajimalpa de Morelos	+9 500 USD
Coyoac√°n	+3 000 USD
√Ålvaro Obreg√≥n	+3 000 USD
üî• Ces quartiers ajoutent de la valeur au prix de l‚Äôappartement. Cela peut s'expliquer par :

Leur attractivit√© √©conomique ou r√©sidentielle

Une meilleure qualit√© de vie

Proximit√© des services, √©coles, transports‚Ä¶

üìâ Quartiers avec effet N√âGATIF sur le prix

Quartier	Impact estim√©
Iztapalapa	-13 000 USD
Tl√°huac	-12 000 USD
Gustavo A. Madero	-5 000 USD
La Magdalena Contreras	-5 000 USD
Venustiano Carranza	-5 000 USD
‚ùå Ces quartiers r√©duisent le prix moyen des appartements. Cela peut √™tre d√ª √† :

Un niveau de vie plus bas

Moins d'infrastructures ou de s√©curit√©

Moins d‚Äôopportunit√©s professionnelles ou commerciales

üß† Interpr√©tation strat√©gique
Si un investisseur veut acheter pour revendre, il pourrait privil√©gier Benito Ju√°rez, Tlalpan ou Cuajimalpa.

Pour des programmes sociaux ou logements abordables, des quartiers comme Iztapalapa ou Tl√°huac sont plus accessibles.




